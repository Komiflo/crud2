package crud

// AUTOGENERATED CODE. Regenerate by running crudgen.

func (self *Foo) BindFields(names []string, values []interface{}) {
	for i, name := range names {
		switch name {

		case "foo_id":
			values[i] = &self.Id

		case "foo_num":
			values[i] = &self.Num

		case "foo_str":
			values[i] = &self.Str

		case "foo_time":
			values[i] = &self.Time

		}
	}
}

func (self *Foo) EnumerateFields() (names []string, values []interface{}) {
	names = make([]string, 0, 4)
	values = make([]interface{}, 0, 4)

	names = append(names, "foo_id")
	values = append(values, &self.Id)

	names = append(names, "foo_num")
	values = append(values, &self.Num)

	names = append(names, "foo_str")
	values = append(values, &self.Str)

	names = append(names, "foo_time")
	values = append(values, &self.Time)

	return
}

func (self *OptionalFoo) BindFields(names []string, values []interface{}) {
	for i, name := range names {
		switch name {

		case "o_int8":
			values[i] = &self.Int8

		case "o_int16":
			values[i] = &self.Int16

		case "o_int32":
			values[i] = &self.Int32

		case "o_int64":
			values[i] = &self.Int64

		case "o_float32":
			values[i] = &self.Float32

		case "o_float64":
			values[i] = &self.Float64

		case "o_bool":
			values[i] = &self.Bool

		case "o_string":
			values[i] = &self.String

		}
	}
}

func (self *OptionalFoo) EnumerateFields() (names []string, values []interface{}) {
	names = make([]string, 0, 8)
	values = make([]interface{}, 0, 8)

	names = append(names, "o_int8")
	values = append(values, &self.Int8)

	names = append(names, "o_int16")
	values = append(values, &self.Int16)

	names = append(names, "o_int32")
	values = append(values, &self.Int32)

	names = append(names, "o_int64")
	values = append(values, &self.Int64)

	names = append(names, "o_float32")
	values = append(values, &self.Float32)

	names = append(names, "o_float64")
	values = append(values, &self.Float64)

	names = append(names, "o_bool")
	values = append(values, &self.Bool)

	names = append(names, "o_string")
	values = append(values, &self.String)

	return
}

func (self *TimeFoo) BindFields(names []string, values []interface{}) {
	for i, name := range names {
		switch name {

		case "time_val":
			values[i] = &self.Time

		case "time_val_ptr":
			values[i] = &self.TimePtr

		}
	}
}

func (self *TimeFoo) EnumerateFields() (names []string, values []interface{}) {
	names = make([]string, 0, 2)
	values = make([]interface{}, 0, 2)

	names = append(names, "time_val")
	values = append(values, &self.Time)

	names = append(names, "time_val_ptr")
	values = append(values, &self.TimePtr)

	return
}
